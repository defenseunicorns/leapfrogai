name: pytest

on:
  pull_request:
    types:
      - opened # default trigger
      - reopened # default trigger
      - synchronize # default trigger
      - ready_for_review # don't run on draft PRs
      - milestoned # allows us to trigger on bot PRs
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/pytest.yaml"
      - ".github/workflows/pytest-shim.yaml"

      # Ignore docs and website things
      - "!**.md"
      - "!docs/**"
      - "!adr/**"
      - "!website/**"
      - "!netlify.toml"

      # Ignore updates to generic github metadata files
      - "!CODEOWNERS"
      - "!.gitignore"
      - "!LICENSE"

      # Ignore LFAI-UI things (no Python)
      - "!src/leapfrogai_ui/**"
      - "!packages/ui/**"

# Declare default permissions as read only.
permissions: read-all

jobs:
  pytest:

    concurrency:
      group: pytest-${{ github.ref }}
      cancel-in-progress: true

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            **/src/leapfrogai_api
            **/src/leapfrogai_sdk
          key: ${{ pytest }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ pytest }}-pip-

      - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c #v5.0.0
        with:
          python-version-file: "pyproject.toml"

      - name: Install Python Deps
        run: pip install ".[dev]" "src/leapfrogai_api" "src/leapfrogai_sdk"

      - name: Build Repeater
        env:
          LOCAL_VERSION: dev
        run: |
          make docker-repeater

      - name: Run Repeater
        id: run_repeater
        run: |
          docker run -p 50051:50051 -d --name=repeater ghcr.io/defenseunicorns/leapfrogai/repeater:dev
          echo "REPEATER_CONTAINER_ID=${REPEATER_CONTAINER_ID}" >> $GITHUB_ENV

      - name: Run Pytest
        run: python -m pytest tests/pytest -v
        env:
          LFAI_RUN_REPEATER_TESTS: true

  integration:
    runs-on: ai-ubuntu-big-boy-8-core

    # If basic unit tests fail, do not run this job
    needs: pytest

    concurrency:
      group: integration-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout Repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Use Cached Python Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            **/src/leapfrogai_api
            **/src/leapfrogai_sdk
          key: ${{ pytest }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ pytest }}-pip-

      - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c #v5.0.0
        with:
          python-version-file: "pyproject.toml"

      - name: Install Python Deps
        run: pip install ".[dev]" "src/leapfrogai_api" "src/leapfrogai_sdk"

      - name: Setup UDS Cluster
        uses: ./.github/actions/uds-cluster
        with:
          registry1Username: ${{ secrets.IRON_BANK_ROBOT_USERNAME }}
          registry1Password: ${{ secrets.IRON_BANK_ROBOT_PASSWORD }}
          ghToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup API and Supabase
        uses: ./.github/actions/lfai-core

      - name: Deploy text-embeddings
        run: |
          make build-text-embeddings LOCAL_VERSION=e2e-test
          docker image prune -af
          uds zarf package deploy packages/text-embeddings/zarf-package-text-embeddings-amd64-e2e-test.tar.zst -l=trace --confirm
          rm packages/text-embeddings/zarf-package-text-embeddings-amd64-e2e-test.tar.zst

      - name: Use Repeater from Previous job
        run: |
          docker start $REPEATER_CONTAINER_ID

      - name: Generate Secrets
        id: generate_secrets
        run: |
          SUPABASE_PASS=$(cat <(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9!@#$%^&*()_+-=[]{}|;:,.<>?' | head -c 20) <(echo '!@1Aa') | fold -w1 | shuf | tr -d '\n')
          echo "::add-mask::$SUPABASE_PASS"
          echo "SUPABASE_PASS=$SUPABASE_PASS" >> $GITHUB_OUTPUT
          SUPABASE_ANON_KEY=$(uds zarf tools kubectl get secret supabase-bootstrap-jwt -n leapfrogai -o jsonpath='{.data.anon-key}' | base64 -d)
          echo P"::add-mask::$SUPABASE_ANON_KEY"
          echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> $GITHUB_OUTPUT

      - name: Verify Secrets
        run: |
          echo "SUPABASE_ANON_KEY is set: ${{ steps.generate_secrets.outputs.SUPABASE_ANON_KEY != '' }}"
          echo "SUPABASE_PASS is set: ${{ steps.generate_secrets.outputs.SUPABASE_PASS != '' }}"

      - name: Run Integration Tests
        env:
          SUPABASE_ANON_KEY: ${{ steps.generate_secrets.outputs.SUPABASE_ANON_KEY }}
          SUPABASE_PASS: ${{ steps.generate_secrets.outputs.SUPABASE_PASS }}
          SUPABASE_EMAIL: "test@test.test"
        run: |
          env $$(cat .env | xargs) python -m pytest -v -s tests/integration/api
