// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatCompletionServiceClient is the client API for ChatCompletionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatCompletionServiceClient interface {
	ChatComplete(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error)
}

type chatCompletionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatCompletionServiceClient(cc grpc.ClientConnInterface) ChatCompletionServiceClient {
	return &chatCompletionServiceClient{cc}
}

func (c *chatCompletionServiceClient) ChatComplete(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error) {
	out := new(ChatCompletionResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatCompletionService/ChatComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatCompletionServiceServer is the server API for ChatCompletionService service.
// All implementations must embed UnimplementedChatCompletionServiceServer
// for forward compatibility
type ChatCompletionServiceServer interface {
	ChatComplete(context.Context, *ChatCompletionRequest) (*ChatCompletionResponse, error)
	mustEmbedUnimplementedChatCompletionServiceServer()
}

// UnimplementedChatCompletionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatCompletionServiceServer struct {
}

func (UnimplementedChatCompletionServiceServer) ChatComplete(context.Context, *ChatCompletionRequest) (*ChatCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatComplete not implemented")
}
func (UnimplementedChatCompletionServiceServer) mustEmbedUnimplementedChatCompletionServiceServer() {}

// UnsafeChatCompletionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatCompletionServiceServer will
// result in compilation errors.
type UnsafeChatCompletionServiceServer interface {
	mustEmbedUnimplementedChatCompletionServiceServer()
}

func RegisterChatCompletionServiceServer(s grpc.ServiceRegistrar, srv ChatCompletionServiceServer) {
	s.RegisterService(&ChatCompletionService_ServiceDesc, srv)
}

func _ChatCompletionService_ChatComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatCompletionServiceServer).ChatComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatCompletionService/ChatComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatCompletionServiceServer).ChatComplete(ctx, req.(*ChatCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatCompletionService_ServiceDesc is the grpc.ServiceDesc for ChatCompletionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatCompletionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatCompletionService",
	HandlerType: (*ChatCompletionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatComplete",
			Handler:    _ChatCompletionService_ChatComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}

// ChatCompletionStreamServiceClient is the client API for ChatCompletionStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatCompletionStreamServiceClient interface {
	ChatCompleteStream(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (ChatCompletionStreamService_ChatCompleteStreamClient, error)
}

type chatCompletionStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatCompletionStreamServiceClient(cc grpc.ClientConnInterface) ChatCompletionStreamServiceClient {
	return &chatCompletionStreamServiceClient{cc}
}

func (c *chatCompletionStreamServiceClient) ChatCompleteStream(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (ChatCompletionStreamService_ChatCompleteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatCompletionStreamService_ServiceDesc.Streams[0], "/chat.ChatCompletionStreamService/ChatCompleteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatCompletionStreamServiceChatCompleteStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatCompletionStreamService_ChatCompleteStreamClient interface {
	Recv() (*ChatCompletionResponse, error)
	grpc.ClientStream
}

type chatCompletionStreamServiceChatCompleteStreamClient struct {
	grpc.ClientStream
}

func (x *chatCompletionStreamServiceChatCompleteStreamClient) Recv() (*ChatCompletionResponse, error) {
	m := new(ChatCompletionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatCompletionStreamServiceServer is the server API for ChatCompletionStreamService service.
// All implementations must embed UnimplementedChatCompletionStreamServiceServer
// for forward compatibility
type ChatCompletionStreamServiceServer interface {
	ChatCompleteStream(*ChatCompletionRequest, ChatCompletionStreamService_ChatCompleteStreamServer) error
	mustEmbedUnimplementedChatCompletionStreamServiceServer()
}

// UnimplementedChatCompletionStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatCompletionStreamServiceServer struct {
}

func (UnimplementedChatCompletionStreamServiceServer) ChatCompleteStream(*ChatCompletionRequest, ChatCompletionStreamService_ChatCompleteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompleteStream not implemented")
}
func (UnimplementedChatCompletionStreamServiceServer) mustEmbedUnimplementedChatCompletionStreamServiceServer() {
}

// UnsafeChatCompletionStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatCompletionStreamServiceServer will
// result in compilation errors.
type UnsafeChatCompletionStreamServiceServer interface {
	mustEmbedUnimplementedChatCompletionStreamServiceServer()
}

func RegisterChatCompletionStreamServiceServer(s grpc.ServiceRegistrar, srv ChatCompletionStreamServiceServer) {
	s.RegisterService(&ChatCompletionStreamService_ServiceDesc, srv)
}

func _ChatCompletionStreamService_ChatCompleteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatCompletionStreamServiceServer).ChatCompleteStream(m, &chatCompletionStreamServiceChatCompleteStreamServer{stream})
}

type ChatCompletionStreamService_ChatCompleteStreamServer interface {
	Send(*ChatCompletionResponse) error
	grpc.ServerStream
}

type chatCompletionStreamServiceChatCompleteStreamServer struct {
	grpc.ServerStream
}

func (x *chatCompletionStreamServiceChatCompleteStreamServer) Send(m *ChatCompletionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ChatCompletionStreamService_ServiceDesc is the grpc.ServiceDesc for ChatCompletionStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatCompletionStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatCompletionStreamService",
	HandlerType: (*ChatCompletionStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompleteStream",
			Handler:       _ChatCompletionStreamService_ChatCompleteStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}
