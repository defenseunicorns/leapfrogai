{{- if and (include "supabase.createInitJob" .) (not .Values.global.jwt.existingSecret) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.names.fullname" . }}-jwt-secret
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: init
  {{- if or .Values.jwt.autoGenerate.annotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.jwt.autoGenerate.annotations .Values.commonAnnotations ) "context" . ) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  backoffLimit: {{ .Values.jwt.autoGenerate.backoffLimit }}
  template:
    metadata:
      {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.jwt.autoGenerate.podLabels .Values.commonLabels ) "context" . ) }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: init
      {{- if .Values.jwt.autoGenerate.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.jwt.autoGenerate.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "supabase.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ template "supabase.jwt.serviceAccountName" . }}
      restartPolicy: OnFailure
      {{- if .Values.jwt.autoGenerate.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.jwt.autoGenerate.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.jwt.autoGenerate.automountServiceAccountToken }}
      {{- if .Values.jwt.autoGenerate.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.jwt.autoGenerate.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        - name: create-jwt-token
          image: {{ template "supabase.jwt-cli.image" . }}
          imagePullPolicy: {{ .Values.jwt.autoGenerate.image.pullPolicy }}
          command:
            - /bin/bash
            - -ec
          args:
            - |
              #!/bin/bash
              echo "Generating JWT secret"
              # Taken from https://supabase.com/docs/guides/self-hosting#api-keys
              SECRET="$(uuidgen)"
              echo "Writing JWT secret to file"
              echo -n "$SECRET" > /bitnami/supabase/secrets/secret
          {{- if .Values.jwt.autoGenerate.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.jwt.autoGenerate.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if or .Values.jwt.autoGenerate.extraEnvVarsCM .Values.jwt.autoGenerate.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.jwt.autoGenerate.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.jwt.autoGenerate.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.jwt.autoGenerate.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.jwt.autoGenerate.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: secret-files
              mountPath: /bitnami/supabase/secrets
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
          {{- if .Values.jwt.autoGenerate.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.jwt.autoGenerate.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.jwt.autoGenerate.resources }}
          resources: {{- toYaml .Values.jwt.autoGenerate.resources | nindent 12 }}
          {{- else if ne .Values.jwt.autoGenerate.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.jwt.autoGenerate.resourcesPreset) | nindent 12 }}
          {{- end }}
      containers:
        - name: create-update-secret
          image: {{ template "supabase.kubectl.image" . }}
          imagePullPolicy: {{ .Values.jwt.autoGenerate.kubectlImage.pullPolicy }}
          command:
            - /bin/bash
            - -ec
          args:
            - |
              #!/bin/bash
              set -o errexit
              set -o nounset
              set -o pipefail
              echo "Creating secret"
              kubectl create secret --namespace={{ include "common.names.namespace" . }} generic {{ include "supabase.jwt.secretName" . }} --from-file=/bitnami/supabase/secrets/secret --dry-run -o yaml | kubectl apply -f -
          {{- if .Values.jwt.autoGenerate.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.jwt.autoGenerate.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if or .Values.jwt.autoGenerate.extraEnvVarsCM .Values.jwt.autoGenerate.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.jwt.autoGenerate.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.jwt.autoGenerate.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.jwt.autoGenerate.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.jwt.autoGenerate.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: secret-files
              mountPath: /bitnami/supabase/secrets
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
          {{- if .Values.jwt.autoGenerate.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.jwt.autoGenerate.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.jwt.autoGenerate.resources }}
          resources: {{- toYaml .Values.jwt.autoGenerate.resources | nindent 12 }}
          {{- else if ne .Values.jwt.autoGenerate.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.jwt.autoGenerate.resourcesPreset) | nindent 12 }}
          {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.jwt.autoGenerate.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.jwt.autoGenerate.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.jwt.autoGenerate.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.jwt.autoGenerate.livenessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - pgrep
                - kubectl
          {{- end }}
          {{- if .Values.jwt.autoGenerate.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.jwt.autoGenerate.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.jwt.autoGenerate.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.jwt.autoGenerate.readinessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - pgrep
                - kubectl
          {{- end }}
          {{- if .Values.jwt.autoGenerate.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.jwt.autoGenerate.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.jwt.autoGenerate.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.jwt.autoGenerate.startupProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - pgrep
                - kubectl
          {{- end }}
          {{- end }}
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: secret-files
          emptyDir: {}
      {{- if .Values.extraVolumes }}
      {{- include "common.tplvalues.render" (dict "value" .Values.jwt.autoGenerate.extraVolumes "context" $) | nindent 6 }}
      {{- end }}
{{- end }}