# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import completion_pb2 as completion_dot_completion__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class CompletionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Complete = channel.unary_unary(
            "/completion.CompletionService/Complete",
            request_serializer=completion_dot_completion__pb2.CompletionRequest.SerializeToString,
            response_deserializer=completion_dot_completion__pb2.CompletionResponse.FromString,
        )


class CompletionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Complete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CompletionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Complete": grpc.unary_unary_rpc_method_handler(
            servicer.Complete,
            request_deserializer=completion_dot_completion__pb2.CompletionRequest.FromString,
            response_serializer=completion_dot_completion__pb2.CompletionResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "completion.CompletionService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CompletionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Complete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/completion.CompletionService/Complete",
            completion_dot_completion__pb2.CompletionRequest.SerializeToString,
            completion_dot_completion__pb2.CompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class CompletionStreamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CompleteStream = channel.unary_stream(
            "/completion.CompletionStreamService/CompleteStream",
            request_serializer=completion_dot_completion__pb2.CompletionRequest.SerializeToString,
            response_deserializer=completion_dot_completion__pb2.CompletionResponse.FromString,
        )


class CompletionStreamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CompleteStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CompletionStreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CompleteStream": grpc.unary_stream_rpc_method_handler(
            servicer.CompleteStream,
            request_deserializer=completion_dot_completion__pb2.CompletionRequest.FromString,
            response_serializer=completion_dot_completion__pb2.CompletionResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "completion.CompletionStreamService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CompletionStreamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CompleteStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/completion.CompletionStreamService/CompleteStream",
            completion_dot_completion__pb2.CompletionRequest.SerializeToString,
            completion_dot_completion__pb2.CompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class LLMConfigServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LLMConfig = channel.unary_unary(
            "/completion.LLMConfigService/LLMConfig",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=completion_dot_completion__pb2.LLMConfigResponse.FromString,
        )


class LLMConfigServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LLMConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_LLMConfigServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "LLMConfig": grpc.unary_unary_rpc_method_handler(
            servicer.LLMConfig,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=completion_dot_completion__pb2.LLMConfigResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "completion.LLMConfigService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class LLMConfigService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LLMConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/completion.LLMConfigService/LLMConfig",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            completion_dot_completion__pb2.LLMConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
